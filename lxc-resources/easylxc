#!/bin/bash
 
if [ -z "$1" ] ; then
    echo "Pass the name of the machine as the first parameter"
    exit 1
fi
 
# The name of the container to create. Also used as the hostname
NAME="$1"
 
# The name of the parent (local) machine without the domain
PARENTNAME="deb0"
 
# Distribution
SUITE="squeeze"
 
# The domain to be used by the virtual machines.
DOMAIN="virt.local"
 
# The network prefix (first 3 octets - it is assumed to be a /24 network)
NETPREFIX="10.3.1"
 
# Since we use approx, this is the approx server. If not, add a mirror.
MIRROR="http://ftp.debian.org/debian/"
 
# The gateway address for the virtual machine. This is most probably the
# address of the bridge interface.
GW="$NETPREFIX.1"
 
# The bridge interface to use for networking
BRIDGEIF="brvirt"
 
# The username of the user to create inside the container
VIRTUSER="student"
 
# A list of local users that will have ssh access to the container
# They need to have a public key in the local machine
LOCALUSERS="icecold root" 
# TODO specify the exact host user for testing the homework
 
# The puppet master. This must be the hostname of the master (not an IP addr).
# No puppet if this is empty.
PUPPETMASTER=""

# Base filesystem for the new container 
BASEFS="/lxc/base/rootfs/"

# The DNS server to use.
DNSSERVER="208.67.222.222"
 
IPADDR2=$(getent hosts $NAME.$DOMAIN | awk '{print $1}')
 
if [ "x$IPADDR2" = "x169.254.1.1" ] ; then
    IPADDR2=""
fi
 
if [ -z "$IPADDR2" ] ; then
    echo "Could not resolve $NAME.$DOMAIN"
    exit 1
fi
 
IPADDR="$IPADDR2/24"
 
MAC=$(date "+4a:%y:%m:%d:%H:%M")
 
lxc-stop -n $NAME
lxc-destroy -n $NAME
 
export SUITE
export MIRROR
 
R0=/var/lib/lxc/$NAME
R=$R0/rootfs
 
mkdir $R0 $R
 
# Install base system
echo cdebootstrap -f standard $SUITE $R $MIRROR
cdebootstrap -f standard $SUITE $R $MIRROR

# Copy the old filesystem into place
#echo cp $BASEFS/* $R/
#cp -r $BASEFS/* $R/

CFG=$R0/config
 
# Create config file
cat << _KOKO > $CFG
# Auto-generated by: $*
# at $(date)
 
## Container
lxc.utsname     = $NAME
lxc.rootfs      = $R
lxc.tty         = 6
lxc.pts         = 1024
 
## Network
lxc.network.type    = veth
lxc.network.hwaddr  = $MAC
lxc.network.link    = $BRIDGEIF
lxc.network.veth.pair   = veth-$NAME
 
## Capabilities
lxc.cap.drop        = mac_admin
lxc.cap.drop        = mac_override
lxc.cap.drop        = sys_admin
lxc.cap.drop        = sys_module
 
## Devices
# Allow all device
lxc.cgroup.devices.allow    = a
# Deny all device
lxc.cgroup.devices.deny     = a
# Allow to mknod all devices (but not using them)
lxc.cgroup.devices.allow    = c *:* m
lxc.cgroup.devices.allow    = b *:* m
 
# /dev/console
lxc.cgroup.devices.allow    = c 5:1 rwm
# /dev/fuse
lxc.cgroup.devices.allow    = c 10:229 rwm
# /dev/null
lxc.cgroup.devices.allow    = c 1:3 rwm
# /dev/ptmx
lxc.cgroup.devices.allow    = c 5:2 rwm
# /dev/pts/*
lxc.cgroup.devices.allow    = c 136:* rwm
# /dev/random
lxc.cgroup.devices.allow    = c 1:8 rwm
# /dev/rtc
lxc.cgroup.devices.allow    = c 254:0 rwm
# /dev/tty
lxc.cgroup.devices.allow    = c 5:0 rwm
# /dev/urandom
lxc.cgroup.devices.allow    = c 1:9 rwm
# /dev/zero
lxc.cgroup.devices.allow    = c 1:5 rwm
# /dev/net/tun
lxc.cgroup.devices.allow        = c 10:200 rwm
 
## Limits
#lxc.cgroup.cpu.shares                  = 1024
#lxc.cgroup.cpuset.cpus                 = 0
#lxc.cgroup.memory.limit_in_bytes       = 256M
#lxc.cgroup.memory.memsw.limit_in_bytes = 1G
 
## Filesystem
lxc.mount.entry     = proc $R/proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry     = sysfs $R/sys sysfs defaults,ro 0 0
 
_KOKO
 
# fix interfaces
T=$R/etc/network/interfaces
rm $T
mv $T $T.orig
(
    cat $T.orig \
        | sed "s/^iface eth0.*$//"
    echo "
auto lo
iface lo inet loopback
 
auto eth0
iface eth0 inet static
    address         $IPADDR2
    netmask         255.255.255.0
    gateway         $GW
    dns-nameservers     $DNSSERVER
    "
) > $T
rm $T.orig
 
# fix resolv.conf
T=$R/etc/resolv.conf
cat << _KOKO > $T
domain $DOMAIN
search $DOMAIN
nameserver $DNSSERVER
_KOKO
 
# add info to hosts
T=$R/etc/hosts
echo "$IPADDR2 $NAME $NAME.$DOMAIN" >> $T
echo "$GW gw gw.$DOMAIN $PARENTNAME.$DOMAIN $PARENTNAME" >> $T
 
# set debian_chroot (for help)
echo "lxc-$NAME" > $R/etc/debian_chroot
 
# create ttys
for i in $(seq 0 6) ; do
    mknod $R/dev/tty$i c 4 $i
done
 
run()
{
    echo chroot $R "$@"
    LC_ALL=C chroot $R "$@"
}
 
run2()
{
    ssh -o StrictHostKeyChecking=no $IPADDR2 "$@"
}
 
runmaster()
{
    ssh -o StrictHostKeyChecking=no $PUPPETMASTER "$@"
}
 
# disable init scripts
DISABLED="bootlogd bootlogs checkfs.sh checkroot.sh halt hostname.sh \
    hwclockfirst.sh hwclock.sh module-init-tools mountall.sh \
    mountdevsubfs.sh mountkernfs.sh mountnfs.sh mountoverflowtmp procps \
    reboot stop-bootlogd stop-bootlogd-single udev umountfs umountnfs.sh \
    umountroot"
for dis in $DISABLED ; do
    run update-rc.d $dis disable
done
 
# disable rsyslog's kernel logging
run sed -i 's/^\(.*imklog.*\)$/#\1/' /etc/rsyslog.conf
 
# add user
run adduser --gecos $VIRTUSER --disabled-password $VIRTUSER
run adduser $VIRTUSER root
 
# fix sources.list
T=$R/etc/apt/sources.list
cat << _KOKO > $T
deb $MIRROR $SUITE main
_KOKO
 
# Install ssh
run apt-get update
run apt-get -y install openssh-server
run apt-get -y install unzip
run apt-get -y install make
run apt-get -y install build-essential
run /etc/init.d/ssh stop

run apt-get -y install sudo
echo "Defaults env_reset" > $R/etc/sudoers
echo "root ALL=(ALL) ALL" >> $R/etc/sudoers
echo "$VIRTUSER ALL=(ALL) NOPASSWD: ALL" >> $R/etc/sudoers

# Fix root and su
#run passwd -l root
#run echo root:student | chpasswd

T=$R/etc/pam.d/su
mv $T $T.old
cat $T.old \
    | sed 's/^# \(.*pam_wheel.so trust\)/\1/' \
    > $T
rm $T.old
 
# Add ssh keys
T=$R/home/$VIRTUSER/.ssh/authorized_keys
T2=$R/root/.ssh/authorized_keys

rm -rf $R/home/$VIRTUSER/.ssh $R/root/.ssh
mkdir $R/home/$VIRTUSER/.ssh $R/root/.ssh
for u in $LOCALUSERS ; do
    H=$(getent passwd $u | cut -f 6 -d :)
    cat $H/.ssh/id_rsa.pub >> $T
    cat $H/.ssh/id_rsa.pub >> $T2
done
chown $VIRTUSER:$VIRTUSER $R/home/$VIRTUSER/.ssh $T
chown root:root $R/home/$VIRTUSER/.ssh $T2



 
## Start it
# Use sudo to bypass file descriptor problems
sudo lxc-start -n $NAME -d
sleep 1
 
if ! [ -z "$PUPPETMASTER" ] ; then
    # Install packages
    run2 apt-get -y install puppet
 
    # Clear any existing certificate
    runmaster puppet cert clean $NAME.$DOMAIN
 
    # Fix puppet config
    T=$R/etc/default/puppet
    mv $T $T.old
    cat $T.old \
        | sed 's/START=no/START=yes/' \
        | sed "s/DAEMON_OPTS=\"\"/DAEMON_OPTS=\"--server=$PUPPETMASTER --verbose\"/" \
        > $T
    rm -rf $T.old
 
    run2 puppet agent --server=$PUPPETMASTER --no-daemonize --onetime
 
    # sign the certificate
    runmaster puppet cert --sign $NAME.$DOMAIN
 
    run2 /etc/init.d/puppet start
fi
 
cat << _KOKO
 
LXC virtual box is ready!
 
Config file is at: $R0/config
Root fs is at: $R
 
Get a console with:
  lxc-console -n $NAME
 
Stop it with:
  lxc-stop -n $NAME
 
Start it with:
  lxc-start -n $NAME -d
 
_KOKO
